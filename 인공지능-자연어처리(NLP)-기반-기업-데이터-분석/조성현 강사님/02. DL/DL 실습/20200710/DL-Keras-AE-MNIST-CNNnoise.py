# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W2pg9p4T-aKluCk5o8uI_-JYTnfQIS7W
"""

# 입력 데이터 생성
X_train = mnist.data[:3000, :] / 255
X_test = mnist.data[3000:3100, :] / 255
plt.imshow(X_train[102].reshape(28, 28), cmap=plt.cm.bone)
plt.show()

# 노이즈 삽입
X_train_n = X_train + 0.3*np.random.normal(size=X_train.shape)
X_test_n = X_test + 0.3*np.random.normal(size=X_test.shape)
print(f"노이즈 삽입 전: {X_train.shape}, 노이즈 삽입 후: {X_train_n.shape}")

# 확인
plt.imshow(X_train_n[102].reshape(28, 28), cmap=plt.cm.bone)
plt.show()

# clip
X_train_n_clipped = np.clip(X_train_n, 0., 1.)
X_test_n_clipped = np.clip(X_test_n, 0., 1.)

# CNN에 주입하기 위해 차원 증가
print("훈련 데이터")
X_train = X_train.reshape(-1, 28, 28)
X_test = X_test.reshape(-1, 28, 28)
print(f"3차원 변환 후: {X_train.shape}")
print(f"3차원 변환 후: {X_test.shape}")
print("")
print("테스트 데이터")
X_train_n = X_train_n_clipped.reshape(-1, 28, 28)
X_test_n = X_test_n_clipped.reshape(-1, 28, 28)
print(f"3차원 변환 전: {X_train_n_clipped.shape}, 후: {X_train.shape}")
print(f"3차원 변환 전: {X_test_n_clipped.shape}, 후: {X_test.shape}")

# CNN 파라미터: 노이즈 데이터를 주입할 것이기 때문에 노이즈로!!
n_height = X_train_n.shape[1] # 28
n_width = X_train_n.shape[2]
n_channel = 1 # 흑백 이미지

# 오토인코더 레이어 구성
x_Input = Input(batch_shape=(None, n_height, n_width, n_channel))

# 인코더
e_conv = Conv2D(filters=10, kernel_size=(3, 3), strides=1, padding='SAME', activation='relu')(x_Input) # same: 28*28
e_pool = MaxPooling2D(pool_size=(2,2), strides=1, padding='SAME')(e_conv) # same! 28 x 28

# 디코더
d_conv = Conv2DTranspose(filters=10, kernel_size=(3, 3), strides=1, padding='SAME', activation='relu')(e_pool) # 아마 same이니까 28*28
x_Output = Conv2D(filters=1, kernel_size=(3, 3), strides=1, padding='SAME', activation='linear')(d_conv) 

# 모델 구성
model = Model(x_Input, x_Output)
model.compile(loss='mse', optimizer=Adam(lr=0.005)) # 이거 그냥 전에 sigmoid여서?
print("====== 모델 전체 구조 =====")
print(model.summary())

# 4차원에 맞추기 위해 채널 축 추가
X_train_n = X_train_n[:, :, :, np.newaxis]

# 오토인코더 학습: X_train과 X_train_n을 맞춘다.
hist = model.fit(X_train_n, X_train, epochs=100, batch_size=300, shuffle=True)

# plot loss
plt.plot(hist.history['loss'], label='Train Loss')
plt.title('Loss Trajectory')
plt.legend()
plt.show()

# 화면에 이미지 그림
def showImage(x):
    n = 0
    for k in range(2): # figure 2개에 10개 나눠 그림 그리기 위해 range(2)
        plt.figure(figsize=(8, 2))
        for i in range(5):
            ax = plt.subplot(1, 5, i+1)
            plt.imshow(x[n].reshape(28, 28))
            plt.gray()
            ax.get_xaxis().set_visible(False)
            ax.get_yaxis().set_visible(False)
            n += 1
        plt.show()

# 노이즈가 추가된 데이터 10개
print("잡음이 삽입된 테스트 데이터 10개")
showImage(X_test_n)

# 오토인코더 모델에 통과시켜서 잡음 제거
print(f"원래 테스트 데이터: {X_test_n.shape}")
X_test_n = X_test_n.reshape(-1, 28, 28)
X_test_n = X_test_n[:, :, :, np.newaxis] # 채널 축 추가
print(f"모델에 넣기 위해 차원을 변경한 데이터: {X_test_n.shape}")

# 잡음 제거
X_test_detected = model.predict(X_test_n)
plt.imshow(X_test_n[0].reshape(28, 28))
plt.show()
plt.imshow(X_test_detected[0].reshape(28, 28))
plt.show()

# 잡음을 제거한 테스트 데이터 10개
print("잡음을 제거한 테스트 데이터 10개")
showImage(X_test_detected)